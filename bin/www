#!/usr/bin/env node
'use strict';

// Load environment variables if present
if (require('fs').existsSync('env/.env')) {
  require('dotenv').config({path: 'env/.env'});
  console.log('Successfully loaded environment variables.');
} else {
  process.env.NODE_ENV = 'development'
  console.warn('Failed loading environment variables from env/.env file. '
      + 'Falling back to development mode.');
}

//module dependencies
const server  = require('../dist/server');
const debug   = require('debug')('express:server');
const http    = require('http');

//create http server
const HTTP_PORT = normalizePort(process.env.HTTP_PORT || 8080); 
const app = server.Server.bootstrap().app.set('port', HTTP_PORT);
const httpServer = http.createServer(app);
httpServer.listen(HTTP_PORT);
httpServer.on('error', onError);
httpServer.on('listening', onListening);


/**
 * Normalize a port into a number, string, or undefined.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  } else if (port >= 0) {
    // port number
    return port;
  } else {
    return undefined;
  }
}

/**
 * Event listener for HTTP server 'error' event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // handle specific listen errors with friendlier messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server 'listening' event.
 */
function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
